
@article{Dunning2017,
  title = {{{JuMP}}: {{A Modeling Language}} for {{Mathematical Optimization}}},
  volume = {59},
  issn = {0036-1445, 1095-7200},
  shorttitle = {{{JuMP}}},
  doi = {10.1137/15M1020575},
  abstract = {JuMP is an open-source modeling language that allows users to express a wide range of optimization problems (linear, mixed-integer, quadratic, conic-quadratic, semidefinite, and nonlinear) in a high-level, algebraic syntax. JuMP takes advantage of advanced features of the Julia programming language to offer unique functionality while achieving performance on par with commercial modeling tools for standard tasks. In this work we will provide benchmarks, present the novel aspects of the implementation, and discuss how JuMP can be extended to new problem classes and composed with state-of-the-art tools for visualization and interactivity.},
  language = {en},
  number = {2},
  journal = {SIAM Review},
  author = {Dunning, Iain and Huchette, Joey and Lubin, Miles},
  month = jan,
  year = {2017},
  pages = {295-320},
  file = {/home/tim/Zotero/storage/23TI8AWQ/Dunning et al. - 2017 - JuMP A Modeling Language for Mathematical Optimiz.pdf}
}

@article{Bezanson2017,
  title = {Julia: {{A Fresh Approach}} to {{Numerical Computing}}},
  volume = {59},
  issn = {0036-1445},
  shorttitle = {Julia},
  doi = {10.1137/141000671},
  abstract = {Bridging cultures that have often been distant, Julia combines expertise from the diverse fields of computer science and computational science to create a new approach to numerical  computing. Julia is  designed to be easy and fast and questions notions generally held to be ``laws of nature"  by practitioners of numerical computing: $\backslash$beginlist $\backslash$item  High-level dynamic programs have to be slow. $\backslash$item  One must prototype in one language and then rewrite in another language for speed or deployment. $\backslash$item There are parts of a system appropriate for the programmer, and other parts that are best left untouched as they have been built by the experts. $\backslash$endlist We introduce the  Julia programming language and its design---a  dance between specialization and abstraction. Specialization allows for custom treatment. Multiple dispatch,  a  technique from computer science, picks  the right algorithm for the right circumstance. Abstraction, which is what good computation is really about, recognizes what remains the same after differences are stripped away. Abstractions in mathematics are captured as code through another technique from computer science, generic programming. Julia shows that  one can achieve machine performance without sacrificing human convenience.},
  number = {1},
  journal = {SIAM Review},
  author = {Bezanson, J. and Edelman, A. and Karpinski, S. and Shah, V.},
  month = jan,
  year = {2017},
  pages = {65-98},
  file = {/home/tim/Zotero/storage/FILEA3IB/Bezanson et al_2017_Julia.pdf;/home/tim/Zotero/storage/NJEL28QB/141000671.html}
}

@article{Wachter2006,
  title = {On the Implementation of an Interior-Point Filter Line-Search Algorithm for Large-Scale Nonlinear Programming},
  volume = {106},
  issn = {1436-4646},
  doi = {10.1007/s10107-004-0559-y},
  abstract = {.We present a primal-dual interior-point algorithm with a filter line-search method for nonlinear programming. Local and global convergence properties of this method were analyzed in previous work. Here we provide a comprehensive description of the algorithm, including the feasibility restoration phase for the filter method, second-order corrections, and inertia correction of the KKT matrix. Heuristics are also considered that allow faster performance. This method has been implemented in the IPOPT code, which we demonstrate in a detailed numerical study based on 954 problems from the CUTEr test set. An evaluation is made of several line-search options, and a comparison is provided with two state-of-the-art interior-point codes for nonlinear programming.},
  language = {en},
  number = {1},
  journal = {Mathematical Programming},
  author = {W\"achter, Andreas and Biegler, Lorenz T.},
  month = mar,
  year = {2006},
  keywords = {49M37,65K05,90C30,90C51,Barrier method,Filter method,Interior-point method,Line search,Nonconvex constrained optimization,Nonlinear programming},
  pages = {25-57},
  file = {/home/tim/Zotero/storage/HENSQ6CP/WÃ¤chter_Biegler_2006_On the implementation of an interior-point filter line-search algorithm for.pdf}
}


